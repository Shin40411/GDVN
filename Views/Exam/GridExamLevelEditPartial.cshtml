@model List<GD.Web.Models.ExamLevelViewModel>
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "gvExamLevelEdit";
        settings.KeyFieldName = "ID";
        settings.CallbackRouteValues = new
        {
            Controller = "Exam",
            Action = "GridExamLevelEditPartial"
        };
        settings.ClientSideEvents.BeginCallback = "CFOnBeginCallBackExamLevelEdit";
        settings.ClientSideEvents.Init = "CFInitGridviewExamLevelEdit";
        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChangedExamLevelEdit";
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Exam", Action = "EditModesAddNewExamLevelEditPartial" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Exam", Action = "EditModesUpdateExamLevelEditPartial" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Exam", Action = "EditModesDeleteExamLevelEditPartial" };
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsPopup.EditForm.Width = 1000;
        settings.SettingsDataSecurity.AllowReadUnlistedFieldsFromClientApi = DefaultBoolean.True;

        settings.ControlStyle.CssClass = "grid-view";
        settings.Width = Unit.Percentage(100);

        settings.Styles.Cell.Wrap = DefaultBoolean.False;
        settings.Styles.PagerBottomPanel.CssClass = "pager";
        settings.Styles.FocusedRow.CssClass = "focused";

        settings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.MinWidth = Unit.Percentage(50);
        settings.SettingsPopup.EditForm.SettingsAdaptivity.HorizontalAlign = PopupAdaptiveHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;
        settings.SettingsText.PopupEditFormCaption = "Số câu hỏi theo độ khó";
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 700;
        settings.EditFormLayoutProperties.SettingsItems.VerticalAlign = FormLayoutVerticalAlign.Top;

        settings.SettingsPager.PageSize = 5;
        settings.SettingsPager.Summary.Text = "Trang: {0} - {1} ({2} trang)";
        settings.SettingsPager.PageSizeItemSettings.Caption = "Số trang:";
        settings.CommandColumn.ButtonRenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.UpdateButton.Image.IconID = DevExpress.Web.ASPxThemes.IconID.SaveSave16x16gray;
        settings.SettingsCommandButton.UpdateButton.Text = "Lưu";
        settings.SettingsCommandButton.CancelButton.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ActionsCancel16x16gray;
        settings.SettingsCommandButton.CancelButton.Text = "Hủy";

        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "5", "10", "15", "20", "50" };

        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.DataAware;
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;

        settings.Toolbars.Add(toolbar =>
        {
            toolbar.Enabled = true;
            toolbar.Position = GridToolbarPosition.Top;
            toolbar.ItemAlign = GridToolbarItemAlign.Right;

            toolbar.Items.Add(s =>
            {
                s.Command = GridViewToolbarCommand.New;
                s.ItemStyle.CssClass = "btn btn-outline-success";
                s.Text = "Thêm";
            });
            toolbar.Items.Add(s =>
            {
                s.Command = GridViewToolbarCommand.Edit;
                s.ItemStyle.CssClass = "btn btn-outline-success";
                s.Text = "Sửa";

            });
            toolbar.Items.Add(s =>
            {
                s.Command = GridViewToolbarCommand.Delete;
                s.ItemStyle.CssClass = "btn btn-outline-success";
                s.Text = "Xóa";

            });

        });

        settings.SettingsSearchPanel.CustomEditorName = "searchExamLevelEdit";

        settings.ClientSideEvents.ToolbarItemClick = "OnToolbarItemExamLevelEditClick";

        settings.Columns.Add(column =>
        {
            column.Caption = "#";
            column.Width = 50;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            column.SetDataItemTemplateContent(tc =>
            {
                ViewContext.Writer.Write("<font>" + (tc.VisibleIndex + 1).ToString() + "</font>");
            });
            column.SetHeaderTemplateContent(tc =>
            {
                ViewContext.Writer.Write("#");
            });
            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "LevelId";
            column.Caption = "Độ khó";
            column.EditFormSettings.ColumnSpan = 2;
            column.EditorProperties().ComboBox(p =>
            {
                p.TextField = "Name";
                p.ValueField = "ID";
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.DropDownWidth = Unit.Pixel(500);
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.TextFormatString = "{0} - {1}";
                p.Columns.Add("Name", "Độ khó", Unit.Percentage(50));
                p.Columns.Add("TypeQuestion.Name", "Thuộc loại", Unit.Percentage(50));
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.LevelQuestion;
            });

        });


        settings.Columns.Add(column => { column.FieldName = "Number"; column.EditFormSettings.ColumnSpan = 2; column.Caption = "Số câu"; });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Type";

            column.EditFormSettings.ColumnSpan = 2;

            column.Caption = "Nguồn";
            column.EditorProperties().ComboBox(p =>
            {
                p.Items.Add("Tất cả", 0);
                p.Items.Add("Cá nhân", 1);
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "TypePoint";
            column.Caption = "Tính điểm";
            column.EditorProperties().ComboBox(p =>
            {
                p.Items.Add("Theo câu hỏi", 0);
                p.Items.Add("Theo tổng điểm", 1);
            });
        });

        settings.Columns.Add(column => { column.FieldName = "SumPoint"; column.Caption = "Tổng điểm"; });

        // Chỉnh sửa Form Nhập liệu
        settings.CellEditorInitialize = (s, e) =>
        {
            MVCxGridView view = (MVCxGridView)s;
            if (view.IsNewRowEditing) // Sự kiện Thêm dòng
            {
                string fields = "";
                if (fields.Contains(e.Column.FieldName))
                {
                    e.Editor.ReadOnly = true;
                }
            }
            else
            {
                string fields = "";
                if (fields.Contains(e.Column.FieldName))
                {
                    e.Editor.ReadOnly = true;
                }
            }
        };

        //Sự kiện trước khi thêm dòng
        settings.InitNewRow = (s, e) =>
        {

        };

        if (ViewData["EditError"] != null)
        {
            settings.Styles.Footer.CssClass = "footerGrid";
            settings.SetFooterRowTemplateContent(c =>
            {
                Html.ViewContext.Writer.Write(ViewData["EditError"]);
            });
        }

        settings.BeforeGetCallbackResult = (s, e) =>
        {
            if (ViewData["EditError"] != null)
            {
                MVCxGridView gridView = (MVCxGridView)s;
                gridView.Settings.ShowFooter = true;
            }
        };

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}

@grid.Bind(Model).GetHtml()
